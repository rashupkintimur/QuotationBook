import config
import telebot
from telebot import types
import requests
from apscheduler.schedulers.background import BackgroundScheduler
import time
import uuid

# —Å–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(config.API_TOKEN)

# –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
url = "https://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang="
users = {}
quotes_db = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=["start"])
def welcome(message):
	# —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	markup = types.ReplyKeyboardMarkup(row_width=2)
	button_en_lang = types.KeyboardButton("üá¨üáßEnglish")
	button_ru_lang = types.KeyboardButton("üá∑üá∫–†—É—Å—Å–∫–∏–π")
	markup.add(button_en_lang, button_ru_lang)

	# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
	bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", reply_markup=markup)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /favorite_quotes
@bot.message_handler(commands=["favorite_quotes"])
def show_favorites(message):
    user_id = message.from_user.id

    if user_id in users and "favorites" in users[user_id] and users[user_id]["favorites"]:
        favorites = users[user_id]["favorites"]
        if not favorites:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç.")
        else:
            response_message = "–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã:\n\n"
            for quote in favorites:
                response_message += f"<i>{quote['text']}</i>\n\n<b>{quote['author']}</b>\n\n"
            bot.send_message(message.chat.id, response_message, parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç.")

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@bot.message_handler(func=lambda message: message.text in ["üá¨üáßEnglish", "üá∑üá∫–†—É—Å—Å–∫–∏–π"])
def quote_message(message):
	global lang

	user_id = message.from_user.id

	if message.text == "üá¨üáßEnglish":
		users[user_id] = { "lang": "en", "favorites": [] }
	elif message.text == "üá∑üá∫–†—É—Å—Å–∫–∏–π":
		users[user_id] = { "lang": "ru", "favorites": [] }

	# –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É"
	markup = types.ReplyKeyboardMarkup(row_width=1)
	button_send = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É")
	markup.add(button_send)
	bot.send_message(message.chat.id, "–Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã!", reply_markup=markup)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É"
@bot.message_handler(func=lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É")
def handle_send(message):
    user_id = message.from_user.id

    if user_id in users:
        send_quote(users[user_id]["lang"], message.chat.id)
    else:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    data = call.data.split(":")
    action = data[0]

    if action == "save_quote":
        quote_id = data[1]
        user_id = call.message.chat.id

        if user_id in users and quote_id in quotes_db:
            quote = quotes_db[quote_id]
            users[user_id]["favorites"].append({
                "text": quote["text"],
                "author": quote["author"]
            })

            bot.answer_callback_query(call.id, "–¶–∏—Ç–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–∏—Ç–∞—Ç—É.")

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ü–∏—Ç–∞—Ç—É
def send_quote(lang, chat_id):
	response = requests.get(url + lang)

	if response.status_code == 200:
		try:
			quoteObj = response.json()
		except ValueError:
			bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
		else:
			quoteText = quoteObj["quoteText"]
			quoteAuthor = quoteObj["quoteAuthor"]

			# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è —Ü–∏—Ç–∞—Ç—ã
			quote_id = str(uuid.uuid4())

			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			quotes_db[quote_id] = {
				"text": quoteText,
                "author": quoteAuthor
			}

			markup = types.InlineKeyboardMarkup()
			save = types.InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"save_quote:{quote_id}")
			markup.add(save)

			bot.send_message(chat_id, f"<i>{quoteText}</i>\n\n<b>{quoteAuthor}</b>", reply_markup=markup, parse_mode="HTML")
	else:
		print(f"–û—à–∏–±–∫–∞: {response.status_code}")

# –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_daily_message():
	for user_id in users:
		send_quote(users[user_id]["lang"], user_id)

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = BackgroundScheduler()
scheduler.add_job(send_daily_message, "cron", hour=7)
scheduler.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
	bot.polling(none_stop=True)
